// ============================================================================
// FILE: lib/indicators.js
// ============================================================================
export const sma = (A,p)=> A.map((_,i)=> i<p-1? null : A.slice(i-p+1,i+1).reduce((s,x)=>s+x,0)/p)
export const ema = (A,p)=>{ if(!A.length) return []; const k=2/(p+1); const out=new Array(A.length); out[0]=A[0]; for(let i=1;i<A.length;i++) out[i]=A[i]*k + out[i-1]*(1-k); return out }
export const wma = (A,p)=> A.map((_,i)=>{ if(i<p-1) return null; const s=A.slice(i-p+1,i+1); const w=s.map((x,k)=>x*(k+1)); return w.reduce((a,b)=>a+b,0)/(p*(p+1)/2) })
export const stdev = (A,p)=> A.map((_,i)=>{ if(i<p-1) return null; const s=A.slice(i-p+1,i+1); const m=s.reduce((a,b)=>a+b,0)/p; const v=s.reduce((a,b)=>a+(b-m)*(b-m),0)/p; return Math.sqrt(v) })
export const rsi = (C,p=14)=>{ if(C.length<p+1) return new Array(C.length).fill(null); const out=new Array(C.length).fill(null); let up=0,dn=0; for(let i=1;i<=p;i++){ const d=C[i]-C[i-1]; if(d>0) up+=d; else dn-=d }
  let au=up/p, ad=dn/p; out[p]=100 - 100/(1+ (ad===0? 100:au/ad)); for(let i=p+1;i<C.length;i++){ const d=C[i]-C[i-1]; const u=Math.max(d,0), dwn=Math.max(-d,0); au=(au*(p-1)+u)/p; ad=(ad*(p-1)+dwn)/p; out[i]=100 - 100/(1+(ad===0?100:au/ad)) } return out }
export const macd = (C, f=12, s=26, sig=9)=>{ const fast=ema(C,f), slow=ema(C,s); const macd=fast.map((x,i)=> x!=null&&slow[i]!=null? fast[i]-slow[i] : null); const signal=ema(macd.filter(x=>x!=null),sig); const fullSignal=new Array(C.length).fill(null); let idx=0; for(let i=0;i<macd.length;i++){ if(macd[i]==null) continue; fullSignal[i]=signal[idx++] } const hist=macd.map((x,i)=> x==null||fullSignal[i]==null? null : x-fullSignal[i]); return { macd, signal: fullSignal, hist } }
export const atr = (H,L,C,p=14)=>{ if(C.length<p+1) return new Array(C.length).fill(null); const tr=new Array(C.length).fill(null); for(let i=1;i<C.length;i++){ const h=H[i], l=L[i], pc=C[i-1]; tr[i]=Math.max(h-l, Math.abs(h-pc), Math.abs(l-pc)) } const out=new Array(C.length).fill(null); let v=tr.slice(1,p+1).reduce((a,b)=>a+b,0)/p; out[p]=v; for(let i=p+1;i<C.length;i++){ v=(out[i-1]*(p-1)+tr[i])/p; out[i]=v } return out }
export const bbands = (C,p=20,k=2)=>{ const mid=sma(C,p); const sd=stdev(C,p); const upper=sd.map((s,i)=> s==null||mid[i]==null? null : mid[i]+k*s); const lower=sd.map((s,i)=> s==null||mid[i]==null? null : mid[i]-k*s); return { mid, upper, lower, sd } }
export const obv = (C,V)=>{ const out=new Array(C.length).fill(null); out[0]=0; for(let i=1;i<C.length;i++){ out[i]= out[i-1] + (C[i]>C[i-1]? V[i]: C[i]<C[i-1]? -V[i] : 0) } return out }
export const vwapFrom = (O,H,L,C,V)=>{ const tp=C.map((_,i)=>(H[i]+L[i]+C[i])/3); let pv=0, vs=0; return C.map((_,i)=>{ pv+=tp[i]*V[i]; vs+=V[i]; return pv/Math.max(vs,1e-9) }) }
export const ichimoku = (H,L,C)=>{ const tenkan = C.map((_,i)=>{ if(i<8) return null; const hi=Math.max(...H.slice(i-8,i+1)); const lo=Math.min(...L.slice(i-8,i+1)); return (hi+lo)/2 }); const kijun = C.map((_,i)=>{ if(i<25) return null; const hi=Math.max(...H.slice(i-25,i+1)); const lo=Math.min(...L.slice(i-25,i+1)); return (hi+lo)/2 }); const spanB = C.map((_,i)=>{ if(i<51) return null; const hi=Math.max(...H.slice(i-51,i+1)); const lo=Math.min(...L.slice(i-51,i+1)); return (hi+lo)/2 }); return { tenkan, kijun, spanB } }
