// lib/subscriptions.js
// –•—Ä–∞–Ω–∏–º VIP –≤ Upstash Redis. –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ payment_id.

import { Redis } from '@upstash/redis'

export const redis = Redis.fromEnv()

// –ö–ª—é—á–∏
const VIP_KEY = (wallet) => `vip:${normalizeWallet(wallet)}`
const PAY_SEEN = (paymentId) => `pay:${paymentId}`

// ‚úÖ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø ID:
// –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ —á–∏—Å—Ç—ã–π accountId, –∏ –æ—à–∏–±–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π order_id —Ñ–æ—Ä–º–∞—Ç–∞ "vipplus:<id>:<ts>"
function normalizeWallet(w) {
  let s = String(w || '').trim().toLowerCase()

  // –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –≤–µ—Å—å order_id ‚Üí –≤—ã—Ç–∞—â–∏–º —Å–µ—Ä–µ–¥–∏–Ω–∫—É
  // vipplus:<accountId>:<ts>
  if (s.startsWith('vipplus:')) {
    const parts = s.split(':')
    if (parts.length >= 2) s = parts[1] // —Ç–æ–ª—å–∫–æ <accountId>
  }

  // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π
  if (s.includes(':')) {
    s = s.split(':')[0]
  }

  return s
}

/**
 * –í–µ—Ä–Ω—ë—Ç ISO-–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è VIP –∏–ª–∏ null.
 * –ï—Å–ª–∏ –Ω–∞–π–¥—ë–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –≤–∏–¥–∞ vip:vipplus:<id>, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä—É–µ–º –≤ vip:<id>.
 */
export async function getVip(wallet) {
  const id = normalizeWallet(wallet)
  if (!id) return null

  // –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
  let v = await redis.get(VIP_KEY(id))
  if (v) return v

  // üëá –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ (–µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –∑–∞–ø–∏—Å–∞–ª–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º vipplus:)
  const legacyKey = `vip:vipplus:${id}`
  const legacy = await redis.get(legacyKey)
  if (legacy) {
    await redis.set(VIP_KEY(id), legacy, { ex: 3600 * 24 * 400 })
    await redis.del(legacyKey)
    return legacy
  }

  return null
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∞–∫—Ç–∏–≤–µ–Ω –ª–∏ VIP —Å–µ–π—á–∞—Å¬ª
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç: { active: boolean, untilISO: string|null, daysLeft: number }
 */
export async function isVipNow(wallet) {
  const untilISO = await getVip(wallet)
  if (!untilISO) return { active: false, untilISO: null, daysLeft: 0 }

  const now = Date.now()
  const until = new Date(untilISO).getTime()
  const active = Number.isFinite(until) && until > now
  const daysLeft = active ? Math.ceil((until - now) / (1000 * 60 * 60 * 24)) : 0
  return { active, untilISO, daysLeft }
}

/**
 * –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ VIP –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã.
 * - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω paymentId –∏ –æ–Ω —É–∂–µ –±—ã–ª ‚Äî –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (duplicated: true)
 * - –µ—Å–ª–∏ –Ω–æ–≤—ã–π until —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É
 */
export async function setVip(wallet, untilISO, { paymentId } = {}) {
  const idRaw = wallet
  const id = normalizeWallet(wallet)
  if (!id || !untilISO) return { ok: false, error: 'BAD_ARGS' }

  // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ paymentId
  if (paymentId) {
    const seen = await redis.set(PAY_SEEN(paymentId), 1, {
      nx: true,
      ex: 3600 * 24 * 400,
    })
    if (seen === null) {
      return { ok: true, duplicated: true }
    }
  }

  // –µ—Å–ª–∏ –ø–æ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–¥–∞–ª–∏ order_id ‚Äî –º–∏–≥—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —á–∏—Å—Ç—ã–π –∫–ª—é—á
  const wrongKey = VIP_KEY(idRaw) // –µ—Å–ª–∏ idRaw –±—ã–ª "vipplus:<id>:<ts>" ‚Üí —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∫–ª—é—á
  const rightKey = VIP_KEY(id)

  if (wrongKey !== rightKey) {
    const wrongVal = await redis.get(wrongKey)
    if (wrongVal) {
      await redis.set(rightKey, wrongVal, { ex: 3600 * 24 * 400 })
      await redis.del(wrongKey)
    }
  }

  const currentISO = await redis.get(rightKey)
  const current = currentISO ? new Date(currentISO) : new Date(0)
  const next = new Date(untilISO)
  const final = current > next ? current : next
  const finalISO = final.toISOString()

  await redis.set(rightKey, finalISO, { ex: 3600 * 24 * 400 })
  return { ok: true, until: finalISO }
}

/**
 * –ü—Ä–æ–¥–ª–∏—Ç—å VIP –Ω–∞ N –¥–Ω–µ–π –æ—Ç ¬´–º–∞–∫—Å–∏–º—É–º–∞(—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞, —Ç–µ–∫—É—â–∏–π VIP)¬ª.
 */
export async function addVipDays(wallet, days, { paymentId } = {}) {
  const id = normalizeWallet(wallet)
  if (!id || !Number.isFinite(days) || days <= 0) {
    return { ok: false, error: 'BAD_ARGS' }
  }
  const now = new Date()
  const currentISO = await getVip(id)
  const base = currentISO ? new Date(currentISO) : now
  const start = base > now ? base : now
  const until = new Date(start.getTime() + days * 24 * 60 * 60 * 1000).toISOString()
  return await setVip(id, until, { paymentId })
}

/**
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
 */
export async function _resetVipForTest(wallet, paymentId) {
  const id = normalizeWallet(wallet)
  if (!id) return { ok: false }
  await redis.del(VIP_KEY(id))
  if (paymentId) await redis.del(PAY_SEEN(paymentId))
  // –∑–∞—á–∏—Å—Ç–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
  await redis.del(`vip:vipplus:${id}`)
  return { ok: true }
}
